/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { selectorFamily } from 'recoil'

import { WithChainId } from '@dao-dao/types'
import {
  ArrayOfQueryPoolInfoResponse,
  ArrayOfRewardInfoResponse,
  ConfigResponse,
  LockInfosResponse,
  PoolInfoResponse,
  RewardInfoResponse,
  RewardsPerSecResponse,
  StakedBalanceAtHeightResponse,
  TotalStakedAtHeightResponse,
} from '@dao-dao/types/contracts/OraichainCw20Staking'

import {
  OraichainCw20StakingClient,
  OraichainCw20StakingQueryClient,
} from '../../../contracts/OraichainCw20Staking'
import {
  refreshClaimsIdAtom,
  refreshWalletBalancesIdAtom,
  signingCosmWasmClientAtom,
} from '../../atoms'
import { cosmWasmClientForChainSelector } from '../chain'

type QueryClientParams = WithChainId<{
  contractAddress: string
}>

export const queryClient = selectorFamily<
  OraichainCw20StakingQueryClient,
  QueryClientParams
>({
  key: 'oraichainCw20StakingQueryClient',
  get:
    ({ contractAddress, chainId }) =>
    ({ get }) => {
      const client = get(cosmWasmClientForChainSelector(chainId))
      return new OraichainCw20StakingQueryClient(client, contractAddress)
    },
  dangerouslyAllowMutability: true,
})

export type ExecuteClientParams = WithChainId<{
  contractAddress: string
  sender: string
}>

export const executeClient = selectorFamily<
  OraichainCw20StakingClient | undefined,
  ExecuteClientParams
>({
  key: 'oraichainCw20StakingExecuteClient',
  get:
    ({ chainId, contractAddress, sender }) =>
    ({ get }) => {
      const client = get(signingCosmWasmClientAtom({ chainId }))
      if (!client) return

      return new OraichainCw20StakingClient(client, sender, contractAddress)
    },
  dangerouslyAllowMutability: true,
})
export const configSelector = selectorFamily<
  ConfigResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['config']>
  }
>({
  key: 'oraichainCw20StakingConfig',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.config(...params)
    },
})
export const poolInfoSelector = selectorFamily<
  PoolInfoResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['poolInfo']>
  }
>({
  key: 'oraichainCw20StakingPoolInfo',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.poolInfo(...params)
    },
})
export const rewardsPerSecSelector = selectorFamily<
  RewardsPerSecResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['rewardsPerSec']>
  }
>({
  key: 'oraichainCw20StakingRewardsPerSec',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.rewardsPerSec(...params)
    },
})
export const rewardInfoSelector = selectorFamily<
  RewardInfoResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['rewardInfo']>
  }
>({
  key: 'oraichainCw20StakingRewardInfo',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.rewardInfo(...params)
    },
})
export const rewardInfosSelector = selectorFamily<
  ArrayOfRewardInfoResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['rewardInfos']>
  }
>({
  key: 'oraichainCw20StakingRewardInfos',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.rewardInfos(...params)
    },
})
export const getPoolsInformationSelector = selectorFamily<
  ArrayOfQueryPoolInfoResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['getPoolsInformation']>
  }
>({
  key: 'oraichainCw20StakingGetPoolsInformation',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.getPoolsInformation(...params)
    },
})
export const lockInfosSelector = selectorFamily<
  LockInfosResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['lockInfos']>
  }
>({
  key: 'oraichainCw20StakingLockInfos',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      get(refreshClaimsIdAtom(params[0].stakerAddr))

      const client = get(queryClient(queryClientParams))
      return await client.lockInfos(...params)
    },
})
export const stakedBalanceAtHeightSelector = selectorFamily<
  StakedBalanceAtHeightResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['stakedBalanceAtHeight']>
  }
>({
  key: 'oraichainCw20StakingStakedBalanceAtHeight',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      get(refreshWalletBalancesIdAtom(params[0].address))

      const client = get(queryClient(queryClientParams))
      return await client.stakedBalanceAtHeight(...params)
    },
})
export const totalStakedAtHeightSelector = selectorFamily<
  TotalStakedAtHeightResponse,
  QueryClientParams & {
    params: Parameters<OraichainCw20StakingQueryClient['totalStakedAtHeight']>
  }
>({
  key: 'oraichainCw20StakingTotalStakedAtHeight',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      get(refreshWalletBalancesIdAtom(undefined))

      const client = get(queryClient(queryClientParams))
      return await client.totalStakedAtHeight(...params)
    },
})

// Custom

const LOCK_INFOS_LIMIT = 30
export const allLockInfosSelector = selectorFamily<
  LockInfosResponse,
  QueryClientParams &
    Pick<
      Parameters<OraichainCw20StakingQueryClient['lockInfos']>[0],
      'stakerAddr' | 'stakingToken'
    >
>({
  key: 'oraichainCw20StakingAllLockInfos',
  get:
    ({ stakerAddr, stakingToken, ...queryClientParams }) =>
    async ({ get }) => {
      const response: LockInfosResponse = {
        lock_infos: [],
        staker_addr: '',
        staking_token: '',
      }

      while (true) {
        const page = await get(
          lockInfosSelector({
            ...queryClientParams,
            params: [
              {
                stakerAddr,
                stakingToken,
                order: 1, // descending
                startAfter:
                  response.lock_infos[response.lock_infos.length - 1]
                    ?.unlock_time,
                limit: LOCK_INFOS_LIMIT,
              },
            ],
          })
        )

        if (!page.staker_addr) {
          response.staker_addr = page.staker_addr
        }
        if (!page.staking_token) {
          response.staking_token = page.staking_token
        }

        response.lock_infos.push(...page.lock_infos)

        // If we have less than the limit of items, we've exhausted them.
        if (response.lock_infos.length < LOCK_INFOS_LIMIT) {
          break
        }
      }

      return response
    },
})
