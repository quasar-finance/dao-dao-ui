/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { QueryClient, UseQueryOptions } from '@tanstack/react-query'

import { IndexerDumpState } from '@dao-dao/types'
import {
  Addr,
  AdminNominationResponse,
  ArrayOfAddr,
  ArrayOfProposalModule,
  ArrayOfSubDao,
  Config,
  Cw20BalancesResponse,
  DaoURIResponse,
  DumpStateResponse,
  GetItemResponse,
  InfoResponse,
  ListItemsResponse,
  PauseInfoResponse,
  ProposalModuleCountResponse,
  TotalPowerAtHeightResponse,
  VotingPowerAtHeightResponse,
} from '@dao-dao/types/contracts/DaoDaoCore'
import { getCosmWasmClientForChainId } from '@dao-dao/utils'

import { DaoDaoCoreQueryClient } from '../../../contracts/DaoDaoCore'
import { contractQueries } from '../contract'
import { indexerQueries } from '../indexer'

export const daoDaoCoreQueryKeys = {
  contract: [
    {
      contract: 'daoDaoCore',
    },
  ] as const,
  address: (chainId: string, contractAddress: string) =>
    [
      {
        ...daoDaoCoreQueryKeys.contract[0],
        chainId,
        address: contractAddress,
      },
    ] as const,
  admin: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'admin',
        args,
      },
    ] as const,
  adminNomination: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'admin_nomination',
        args,
      },
    ] as const,
  config: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
  cw20Balances: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'cw20_balances',
        args,
      },
    ] as const,
  cw20TokenList: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'cw20_token_list',
        args,
      },
    ] as const,
  cw721TokenList: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'cw721_token_list',
        args,
      },
    ] as const,
  dumpState: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'dump_state',
        args,
      },
    ] as const,
  getItem: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'get_item',
        args,
      },
    ] as const,
  listItems: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'list_items',
        args,
      },
    ] as const,
  listAllItems: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'list_all_items',
        args,
      },
    ] as const,
  info: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
  proposalModules: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'proposal_modules',
        args,
      },
    ] as const,
  activeProposalModules: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'active_proposal_modules',
        args,
      },
    ] as const,
  proposalModuleCount: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'proposal_module_count',
        args,
      },
    ] as const,
  pauseInfo: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'pause_info',
        args,
      },
    ] as const,
  votingModule: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'voting_module',
        args,
      },
    ] as const,
  listSubDaos: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'list_sub_daos',
        args,
      },
    ] as const,
  daoURI: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'dao_u_r_i',
        args,
      },
    ] as const,
  votingPowerAtHeight: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'voting_power_at_height',
        args,
      },
    ] as const,
  totalPowerAtHeight: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoDaoCoreQueryKeys.address(chainId, contractAddress)[0],
        method: 'total_power_at_height',
        args,
      },
    ] as const,
}
export const daoDaoCoreQueries = {
  admin: <TData = Addr>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCoreAdminQuery<TData>
  ): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.admin(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/admin',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).admin()
    },
    ...options,
  }),
  adminNomination: <TData = AdminNominationResponse>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCoreAdminNominationQuery<TData>
  ): UseQueryOptions<AdminNominationResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.adminNomination(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return {
          nomination: await queryClient.fetchQuery(
            indexerQueries.queryContract(queryClient, {
              chainId,
              contractAddress,
              formula: 'daoCore/adminNomination',
            })
          ),
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).adminNomination()
    },
    ...options,
  }),
  config: <TData = Config>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCoreConfigQuery<TData>
  ): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.config(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/config',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).config()
    },
    ...options,
  }),
  cw20Balances: <TData = Cw20BalancesResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoDaoCoreCw20BalancesQuery<TData>): UseQueryOptions<
    Cw20BalancesResponse,
    Error,
    TData
  > => ({
    queryKey: daoDaoCoreQueryKeys.cw20Balances(chainId, contractAddress, args),
    queryFn: async () => {
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).cw20Balances({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  cw20TokenList: <TData = ArrayOfAddr>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoDaoCoreCw20TokenListQuery<TData>): UseQueryOptions<
    ArrayOfAddr,
    Error,
    TData
  > => ({
    queryKey: daoDaoCoreQueryKeys.cw20TokenList(chainId, contractAddress, args),
    queryFn: async () => {
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).cw20TokenList({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  cw721TokenList: <TData = ArrayOfAddr>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoDaoCoreCw721TokenListQuery<TData>): UseQueryOptions<
    ArrayOfAddr,
    Error,
    TData
  > => ({
    queryKey: daoDaoCoreQueryKeys.cw721TokenList(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).cw721TokenList({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  dumpState: <TData = DumpStateResponse | IndexerDumpState>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCoreDumpStateQuery<TData>
  ): UseQueryOptions<DumpStateResponse | IndexerDumpState, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.dumpState(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        const state = await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/dumpState',
          })
        )
        if (state) {
          return state
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).dumpState()
    },
    ...options,
  }),
  getItem: <TData = GetItemResponse>(
    queryClient: QueryClient,
    { chainId, contractAddress, args, options }: DaoDaoCoreGetItemQuery<TData>
  ): UseQueryOptions<GetItemResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.getItem(chainId, contractAddress, args),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return {
          item:
            (await queryClient.fetchQuery(
              indexerQueries.queryContract(queryClient, {
                chainId,
                contractAddress,
                formula: 'daoCore/getItem',
                args,
              })
            )) || null,
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).getItem({
        key: args.key,
      })
    },
    ...options,
  }),
  listItems: <TData = ListItemsResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoDaoCoreListItemsQuery<TData>): UseQueryOptions<
    ListItemsResponse,
    Error,
    TData
  > => ({
    queryKey: daoDaoCoreQueryKeys.listItems(chainId, contractAddress, args),
    queryFn: async () => {
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).listItems({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  listAllItems: <TData = ListItemsResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoDaoCoreListAllItemsQuery<TData>
  ): UseQueryOptions<ListItemsResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.listAllItems(chainId, contractAddress, args),
    queryFn: async () => {
      let items: ListItemsResponse | undefined

      try {
        const indexerItems = await queryClient.fetchQuery(
          indexerQueries.queryContract<ListItemsResponse>(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/listItems',
          })
        )
        if (indexerItems) {
          items = indexerItems
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      if (!items) {
        items = []
        const limit = 30
        while (true) {
          const page = await queryClient.fetchQuery(
            daoDaoCoreQueries.listItems({
              chainId,
              contractAddress,
              args: {
                limit,
                startAfter: items.length
                  ? items[items.length - 1]?.[0]
                  : undefined,
              },
            })
          )
          if (!page.length) {
            break
          }

          items.push(...page)

          // If we have less than the limit of items, we've exhausted them.
          if (page.length < limit) {
            break
          }
        }
      }

      // If we have a prefix, filter out items that don't start with it, and
      // then remove the prefix from each key.
      if (args?.prefix) {
        items = items.flatMap(([key, value]) =>
          key.startsWith(args.prefix!)
            ? [[key.substring(args.prefix!.length), value]]
            : []
        )
      }

      return items
    },
    ...options,
  }),
  info: contractQueries.info,
  proposalModules: <TData = ArrayOfProposalModule>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoDaoCoreProposalModulesQuery<TData>
  ): UseQueryOptions<ArrayOfProposalModule, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.proposalModules(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/proposalModules',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalModules({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  activeProposalModules: <TData = ArrayOfProposalModule>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoDaoCoreActiveProposalModulesQuery<TData>
  ): UseQueryOptions<ArrayOfProposalModule, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.activeProposalModules(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/activeProposalModules',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).activeProposalModules({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  proposalModuleCount: <TData = ProposalModuleCountResponse>({
    chainId,
    contractAddress,
    options,
  }: DaoDaoCoreProposalModuleCountQuery<TData>): UseQueryOptions<
    ProposalModuleCountResponse,
    Error,
    TData
  > => ({
    queryKey: daoDaoCoreQueryKeys.proposalModuleCount(chainId, contractAddress),
    queryFn: async () => {
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalModuleCount()
    },
    ...options,
  }),
  pauseInfo: <TData = PauseInfoResponse>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCorePauseInfoQuery<TData>
  ): UseQueryOptions<PauseInfoResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.pauseInfo(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/pauseInfo',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).pauseInfo()
    },
    ...options,
  }),
  votingModule: <TData = Addr>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCoreVotingModuleQuery<TData>
  ): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.votingModule(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/votingModule',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).votingModule()
    },
    ...options,
  }),
  listSubDaos: <TData = ArrayOfSubDao>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoDaoCoreListSubDaosQuery<TData>): UseQueryOptions<
    ArrayOfSubDao,
    Error,
    TData
  > => ({
    queryKey: daoDaoCoreQueryKeys.listSubDaos(chainId, contractAddress, args),
    queryFn: async () => {
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).listSubDaos({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  daoURI: <TData = DaoURIResponse>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoDaoCoreDaoURIQuery<TData>
  ): UseQueryOptions<DaoURIResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.daoURI(chainId, contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/daoUri',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).daoURI()
    },
    ...options,
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoDaoCoreVotingPowerAtHeightQuery<TData>
  ): UseQueryOptions<VotingPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.votingPowerAtHeight(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/votingPowerAtHeight',
            args: {
              address: args.address,
            },
            ...(args.height && { height: args.height }),
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).votingPowerAtHeight({
        address: args.address,
        height: args.height,
      })
    },
    ...options,
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoDaoCoreTotalPowerAtHeightQuery<TData>
  ): UseQueryOptions<TotalPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoDaoCoreQueryKeys.totalPowerAtHeight(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoCore/totalPowerAtHeight',
            ...(args.height && { height: args.height }),
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoDaoCoreQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).totalPowerAtHeight({
        height: args.height,
      })
    },
    ...options,
  }),
}
export interface DaoDaoCoreReactQuery<TResponse, TData = TResponse> {
  chainId: string
  contractAddress: string
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  > & {
    initialData?: undefined
  }
}
export interface DaoDaoCoreTotalPowerAtHeightQuery<TData>
  extends DaoDaoCoreReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number
  }
}
export interface DaoDaoCoreVotingPowerAtHeightQuery<TData>
  extends DaoDaoCoreReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string
    height?: number
  }
}
export interface DaoDaoCoreDaoURIQuery<TData>
  extends DaoDaoCoreReactQuery<DaoURIResponse, TData> {}
export interface DaoDaoCoreListSubDaosQuery<TData>
  extends DaoDaoCoreReactQuery<ArrayOfSubDao, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreVotingModuleQuery<TData>
  extends DaoDaoCoreReactQuery<Addr, TData> {}
export interface DaoDaoCorePauseInfoQuery<TData>
  extends DaoDaoCoreReactQuery<PauseInfoResponse, TData> {}
export interface DaoDaoCoreProposalModuleCountQuery<TData>
  extends DaoDaoCoreReactQuery<ProposalModuleCountResponse, TData> {}
export interface DaoDaoCoreActiveProposalModulesQuery<TData>
  extends DaoDaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreProposalModulesQuery<TData>
  extends DaoDaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreInfoQuery<TData>
  extends DaoDaoCoreReactQuery<InfoResponse, TData> {}
export interface DaoDaoCoreListItemsQuery<TData>
  extends DaoDaoCoreReactQuery<ListItemsResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreListAllItemsQuery<TData>
  extends DaoDaoCoreReactQuery<ListItemsResponse, TData> {
  args?: {
    /**
     * Optionally specify a prefix to filter results by and then remove from
     * each returned key.
     */
    prefix?: string
  }
}
export interface DaoDaoCoreGetItemQuery<TData>
  extends DaoDaoCoreReactQuery<GetItemResponse, TData> {
  args: {
    key: string
  }
}
export interface DaoDaoCoreDumpStateQuery<TData>
  extends DaoDaoCoreReactQuery<DumpStateResponse | IndexerDumpState, TData> {}
export interface DaoDaoCoreCw721TokenListQuery<TData>
  extends DaoDaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreCw20TokenListQuery<TData>
  extends DaoDaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreCw20BalancesQuery<TData>
  extends DaoDaoCoreReactQuery<Cw20BalancesResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoDaoCoreConfigQuery<TData>
  extends DaoDaoCoreReactQuery<Config, TData> {}
export interface DaoDaoCoreAdminNominationQuery<TData>
  extends DaoDaoCoreReactQuery<AdminNominationResponse, TData> {}
export interface DaoDaoCoreAdminQuery<TData>
  extends DaoDaoCoreReactQuery<Addr, TData> {}
