/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type Addr = string
export type Uint128 = string
export type Duration =
  | {
      height: number
    }
  | {
      time: number
    }
export type Threshold =
  | {
      absolute_percentage: {
        percentage: PercentageThreshold
      }
    }
  | {
      threshold_quorum: {
        quorum: PercentageThreshold
        threshold: PercentageThreshold
      }
    }
  | {
      absolute_count: {
        threshold: Uint128
      }
    }
export type PercentageThreshold =
  | {
      majority: {}
    }
  | {
      percent: Decimal
    }
export type Decimal = string
export interface ConfigResponse {
  allow_revoting: boolean
  dao: Addr
  deposit_info?: CheckedDepositInfo | null
  max_voting_period: Duration
  min_voting_period?: Duration | null
  only_members_execute: boolean
  threshold: Threshold
}
export interface CheckedDepositInfo {
  deposit: Uint128
  refund_failed_proposals: boolean
  token: Addr
}
export type ExecuteMsg =
  | {
      propose: {
        description: string
        msgs: CosmosMsgForEmpty[]
        title: string
      }
    }
  | {
      vote: {
        proposal_id: number
        vote: Vote
      }
    }
  | {
      execute: {
        proposal_id: number
      }
    }
  | {
      close: {
        proposal_id: number
      }
    }
  | {
      update_config: {
        allow_revoting: boolean
        dao: string
        deposit_info?: DepositInfo | null
        max_voting_period: Duration
        min_voting_period?: Duration | null
        only_members_execute: boolean
        threshold: Threshold
      }
    }
  | {
      add_proposal_hook: {
        address: string
      }
    }
  | {
      remove_proposal_hook: {
        address: string
      }
    }
  | {
      add_vote_hook: {
        address: string
      }
    }
  | {
      remove_vote_hook: {
        address: string
      }
    }
export type CosmosMsgForEmpty =
  | {
      bank: BankMsg
    }
  | {
      custom: Empty
    }
  | {
      staking: StakingMsg
    }
  | {
      distribution: DistributionMsg
    }
  | {
      stargate: {
        type_url: string
        value: Binary
      }
    }
  | {
      ibc: IbcMsg
    }
  | {
      wasm: WasmMsg
    }
  | {
      gov: GovMsg
    }
export type BankMsg =
  | {
      send: {
        amount: Coin[]
        to_address: string
      }
    }
  | {
      burn: {
        amount: Coin[]
      }
    }
export type StakingMsg =
  | {
      delegate: {
        amount: Coin
        validator: string
      }
    }
  | {
      undelegate: {
        amount: Coin
        validator: string
      }
    }
  | {
      redelegate: {
        amount: Coin
        dst_validator: string
        src_validator: string
      }
    }
export type DistributionMsg =
  | {
      set_withdraw_address: {
        address: string
      }
    }
  | {
      withdraw_delegator_reward: {
        validator: string
      }
    }
export type Binary = string
export type IbcMsg =
  | {
      transfer: {
        amount: Coin
        channel_id: string
        timeout: IbcTimeout
        to_address: string
      }
    }
  | {
      send_packet: {
        channel_id: string
        data: Binary
        timeout: IbcTimeout
      }
    }
  | {
      close_channel: {
        channel_id: string
      }
    }
export type Timestamp = Uint64
export type Uint64 = string
export type WasmMsg =
  | {
      execute: {
        contract_addr: string
        funds: Coin[]
        msg: Binary
      }
    }
  | {
      instantiate: {
        admin?: string | null
        code_id: number
        funds: Coin[]
        label: string
        msg: Binary
      }
    }
  | {
      migrate: {
        contract_addr: string
        msg: Binary
        new_code_id: number
      }
    }
  | {
      update_admin: {
        admin: string
        contract_addr: string
      }
    }
  | {
      clear_admin: {
        contract_addr: string
      }
    }
export type GovMsg = {
  vote: {
    proposal_id: number
    vote: VoteOption
  }
}
export type VoteOption = 'yes' | 'no' | 'abstain' | 'no_with_veto'
export type Vote = 'yes' | 'no' | 'abstain'
export type DepositToken =
  | {
      token: {
        address: string
      }
    }
  | {
      voting_module_token: {}
    }
export interface Coin {
  amount: Uint128
  denom: string
}
export interface Empty {}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null
  timestamp?: Timestamp | null
}
export interface IbcTimeoutBlock {
  height: number
  revision: number
}
export interface DepositInfo {
  deposit: Uint128
  refund_failed_proposals: boolean
  token: DepositToken
}
export type GovernanceModulesResponse = Addr[]
export interface InfoResponse {
  info: ContractVersion
}
export interface ContractVersion {
  contract: string
  version: string
}
export interface InstantiateMsg {
  allow_revoting: boolean
  deposit_info?: DepositInfo | null
  max_voting_period: Duration
  min_voting_period?: Duration | null
  only_members_execute: boolean
  threshold: Threshold
}
export type Expiration =
  | {
      at_height: number
    }
  | {
      at_time: Timestamp
    }
  | {
      never: {}
    }
export type Status = 'open' | 'rejected' | 'passed' | 'executed' | 'closed'
export interface ListProposalsResponse {
  proposals: ProposalResponse[]
}
export interface ProposalResponse {
  id: number
  proposal: Proposal
  // Indexer may return these.
  hideFromSearch?: boolean
  dao?: string
  daoProposalId?: string
  createdAt?: string
  completedAt?: string
  executedAt?: string
  closedAt?: string
}
export interface Proposal {
  allow_revoting: boolean
  deposit_info?: CheckedDepositInfo | null
  description: string
  expiration: Expiration
  min_voting_period?: Expiration | null
  msgs: CosmosMsgForEmpty[]
  proposer: Addr
  start_height: number
  status: Status
  threshold: Threshold
  title: string
  total_power: Uint128
  votes: Votes
}
export interface Votes {
  abstain: Uint128
  no: Uint128
  yes: Uint128
}
export interface ListVotesResponse {
  votes: VoteInfo[]
}
export interface VoteInfo {
  power: Uint128
  vote: Vote
  voter: Addr
}
export interface MigrateMsg {}
export type ProposalCountResponse = number
export interface ProposalHooksResponse {
  hooks: string[]
}
export type QueryMsg =
  | {
      config: {}
    }
  | {
      proposal: {
        proposal_id: number
      }
    }
  | {
      list_proposals: {
        limit?: number | null
        start_after?: number | null
      }
    }
  | {
      reverse_proposals: {
        limit?: number | null
        start_before?: number | null
      }
    }
  | {
      proposal_count: {}
    }
  | {
      vote: {
        proposal_id: number
        voter: string
      }
    }
  | {
      list_votes: {
        limit?: number | null
        proposal_id: number
        start_after?: string | null
      }
    }
  | {
      proposal_hooks: {}
    }
  | {
      vote_hooks: {}
    }
  | {
      info: {}
    }
export interface ReverseProposalsResponse {
  proposals: ProposalResponse[]
}
export interface VoteHooksResponse {
  hooks: string[]
}
export interface VoteResponse {
  vote?: VoteInfo | null
}
